{
  "repo_full_name": "bitcoin/bitcoin",
  "license": "MIT License",
  "open_issues_count": 952,
  "forks": 32500,
  "stars": 64519,
  "watchers": 64519,
  "topics": [
    "bitcoin",
    "c-plus-plus",
    "cryptocurrency",
    "cryptography",
    "p2p"
  ],
  "pushed_at": "2022-06-07T02:07:20Z",
  "organization": "bitcoin",
  "contributors": [
    {
      "username": "laanwj",
      "contributions": 7315
    },
    {
      "username": "MarcoFalke",
      "contributions": 5175
    },
    {
      "username": "fanquake",
      "contributions": 2055
    },
    {
      "username": "sipa",
      "contributions": 2012
    },
    {
      "username": "hebasto",
      "contributions": 1122
    },
    {
      "username": "gavinandresen",
      "contributions": 1101
    },
    {
      "username": "jnewbery",
      "contributions": 788
    },
    {
      "username": "jonasschnelli",
      "contributions": 772
    },
    {
      "username": "achow101",
      "contributions": 743
    },
    {
      "username": "practicalswift",
      "contributions": 715
    },
    {
      "username": "theuni",
      "contributions": 607
    },
    {
      "username": "jonatack",
      "contributions": 576
    },
    {
      "username": "TheBlueMatt",
      "contributions": 504
    },
    {
      "username": "luke-jr",
      "contributions": 470
    },
    {
      "username": "dongcarl",
      "contributions": 458
    },
    {
      "username": "ryanofsky",
      "contributions": 456
    },
    {
      "username": "promag",
      "contributions": 334
    },
    {
      "username": "meshcollider",
      "contributions": 317
    },
    {
      "username": "theStack",
      "contributions": 309
    },
    {
      "username": "sdaftuar",
      "contributions": 294
    },
    {
      "username": "non-github-bitcoin",
      "contributions": 271
    },
    {
      "username": "gmaxwell",
      "contributions": 267
    },
    {
      "username": "morcos",
      "contributions": 209
    },
    {
      "username": "ajtowns",
      "contributions": 191
    },
    {
      "username": "Sjors",
      "contributions": 184
    },
    {
      "username": "vasild",
      "contributions": 182
    },
    {
      "username": "glozow",
      "contributions": 181
    },
    {
      "username": "jtimon",
      "contributions": 173
    },
    {
      "username": "kallewoof",
      "contributions": 163
    },
    {
      "username": "instagibbs",
      "contributions": 152
    }
  ],
  "contributors_count": 30,
  "commits": [
    {
      "author": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2022-06-06T15:10:17Z"
      },
      "message": "Merge bitcoin/bitcoin#25220: rpc: fix incorrect warning for address type p2sh-segwit in createmultisig\n\n3a9b9bb38e653c8ff7220b9af6e337a90c2c22dc test: ensure createmultisig and addmultisigaddress are not returning any warning for expected cases (brunoerg)\neaf6f630c0190c634b5f1c85f749437f4209cc36 rpc: fix inappropriate warning for address type p2sh-segwit in createmultisig and addmultisigaddress (brunoerg)\n\nPull request description:\n\n  Fixes #25127\n\n  If there are any uncompressed keys when calling `AddAndGetMultisigDestination`, it will just default to a legacy address regardless of the chosen `address_type`. So, #23113 added a warnings field which will warn the user why their address format is different.\n\n  However, when creating a multisig (p2sh-segwit), it is returning an inappropriate warning, because when getting the output type from destination (`OutputTypeFromDestination`), it returns `ScriptHash` for both legacy and `P2SH_SEGWIT`. So, since `P2SH_SEGWIT` is different from `ScriptHash`, it returns the warning:\n  https://github.com/bitcoin/bitcoin/blob/192d639a6b1bd0feaa52e6ea4e63e33982704c32/src/rpc/output_script.cpp#L166-L169\n\n  So, to avoid this mistake I changed `OutputTypeFromDestination` to `descriptor->GetOutputType()` to get the appropriate output type.\n\nACKs for top commit:\n  jonatack:\n    ACK 3a9b9bb38e653c8ff7220b9af6e337a90c2c22dc\n  laanwj:\n    Code review ACK 3a9b9bb38e653c8ff7220b9af6e337a90c2c22dc\n\nTree-SHA512: 49f717479c2b8906277e7591ddd4747f7961c2d5c77494b5124045de9036a4277d46b9ad99279d51f0c4484284c445f1e1d3c55c49bbf0716741bad426a89369",
      "pushed_at": "2022-06-06T15:13:22Z"
    },
    {
      "author": {
        "name": "MacroFake",
        "email": "falke.marco@gmail.com",
        "date": "2022-06-06T13:54:28Z"
      },
      "message": "Merge bitcoin/bitcoin#25276: doc: Fix typo in importdescriptors\n\n210cd592cd67e05434c87d6f95e2d8d5b7abc800 doc: Fix typo in importdescriptors (Kolby Moroz Liebl)\n\nPull request description:\n\nACKs for top commit:\n  1440000bytes:\n    ACK https://github.com/bitcoin/bitcoin/pull/25276/commits/210cd592cd67e05434c87d6f95e2d8d5b7abc800\n  LarryRuane:\n    ACK 210cd592cd67e05434c87d6f95e2d8d5b7abc800\n  brunoerg:\n    crACK 210cd592cd67e05434c87d6f95e2d8d5b7abc800\n\nTree-SHA512: 39ff9777b05abc1a68c8c3e646e00b0672838696c567c582d0492baa753863231447fd8439bd41cd8a8b8ba752299b032e839c8862c02faa2bdc207a9a7a8540",
      "pushed_at": "2022-06-06T13:54:30Z"
    },
    {
      "author": {
        "name": "MacroFake",
        "email": "falke.marco@gmail.com",
        "date": "2022-06-06T13:15:08Z"
      },
      "message": "Merge bitcoin/bitcoin#25255: ci: Improve \"ARM64 Android APK\" task\n\nc47944f4e93204e13686280da86efffee4ba6eb2 ci: Reuse some configure options in \"ARM64 Android APK\" task (Hennadii Stepanov)\n7739438811adef67766aa845122633ff7f594e35 ci, android: Update NDK up to r23c (Hennadii Stepanov)\nca0c3e50779771832dd8db419940fde877d9b691 ci, android: Update Command-line Tools from 2.1 up to 7.0 (Hennadii Stepanov)\n8790da3c1e9006ca9c1937595cb0f55889c1c026 ci: Drop unneeded packages in \"ARM64 Android APK\" task (Hennadii Stepanov)\n\nPull request description:\n\n  This PR improves the \"ARM64 Android APK\" CI task in the following ways:\n  - dropped packages that are not required to be installed\n  - updated Android Command-line Tools and Android NDK to make the CI environment closer to the default one, which is provided by Android Studio\n\nACKs for top commit:\n  icota:\n    utACK c47944f4e93204e13686280da86efffee4ba6eb2\n\nTree-SHA512: 45f5aba41007a502ae90333272370fd559c48a27d573896c449b3e436c5cf2b6440408381e4d20eb53104426ade26d3a9014c09dcdf3257ec897a537095efa4f",
      "pushed_at": "2022-06-06T13:15:21Z"
    },
    {
      "author": {
        "name": "brunoerg",
        "email": "brunoely.gc@gmail.com",
        "date": "2022-05-25T18:17:12Z"
      },
      "message": "test: ensure createmultisig and addmultisigaddress are not returning any warning for expected cases",
      "pushed_at": "2022-06-06T12:46:42Z"
    },
    {
      "author": {
        "name": "brunoerg",
        "email": "brunoely.gc@gmail.com",
        "date": "2022-05-25T18:16:22Z"
      },
      "message": "rpc: fix inappropriate warning for address type p2sh-segwit in createmultisig and addmultisigaddress",
      "pushed_at": "2022-06-06T12:46:02Z"
    },
    {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2022-06-05T12:13:13Z"
      },
      "message": "Merge bitcoin-core/gui#614: Drop no longer supported Android architecture\n\nd1b7bcbca2be4eae3bf7572a8343a3bd69ce61a9 qt: Drop no longer supported Android architecture (Hennadii Stepanov)\n\nPull request description:\n\n  The `i686-linux-android` arch support has been dropped since bitcoin/bitcoin#23744.\n\nACKs for top commit:\n  katesalazar:\n    ACK d1b7bcbca2be4eae3bf7572a8343a3bd69ce61a9\n  icota:\n    utACK https://github.com/bitcoin-core/gui/pull/614/commits/d1b7bcbca2be4eae3bf7572a8343a3bd69ce61a9\n  prusnak:\n    Approach ACK d1b7bcbca2be4eae3bf7572a8343a3bd69ce61a9\n\nTree-SHA512: 13689ec8c63c92b9a52a3c25edc35536b8e51ff583f57c45b168515f928d020d6bb85d03db9efd8d5efd57b944dfd313a89f5ff8a52f99982ccc8d9671f6e7a9",
      "pushed_at": "2022-06-05T12:29:29Z"
    },
    {
      "author": {
        "name": "Kolby Moroz Liebl",
        "email": "31669092+KolbyML@users.noreply.github.com",
        "date": "2022-06-05T00:48:30Z"
      },
      "message": "doc: Fix typo in importdescriptors",
      "pushed_at": "2022-06-05T00:48:30Z"
    },
    {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2022-06-04T19:52:10Z"
      },
      "message": "Merge bitcoin/bitcoin#24860: Miniscript integration follow-ups\n\nf3a50c9dfe645c548713e44e0eaf26ea9917a379 miniscript: rename IsSane and IsSaneSubexpression to prevent misuse (Antoine Poinsot)\nc5fe5163dc31db939c44129f2ff8283b290a9330 miniscript: nit: don't return after assert(false) (Antoine Poinsot)\n7bbaca9d8d355a17348a8d01e3e2521c5de466b0 miniscript: explicit the threshold size computation in multi() (Antoine Poinsot)\n8323e4249db50d46ae4f43c1d8a50666549ae938 miniscript: add an OpCode typedef for readability (Antoine Poinsot)\n7a549c6c59e6babbae76af008433426c6fa38fe2 miniscript: mark nodes with duplicate keys as insane (Antoine Poinsot)\n8c0f8bf7bc3750fad648af1a548517a272114bca fuzz: add a Miniscript target for string representation roundtripping (Antoine Poinsot)\nbe34d5077b2fede7404de7706362f5858c443525 fuzz: rename and improve the Miniscript Script roundtrip target (Antoine Poinsot)\n7eb70f0ac0a54adabc566e2b93bbf6b2beb54a79 miniscript: tiny doc fixups (Antoine Poinsot)\n5cea85f12cba5dcfe3a298eddfa711f582adffac miniscript: split ValidSatisfactions from IsSane (Antoine Poinsot)\na0f064dc1474a048e236bfff12f4def3aa11daf3 miniscript: introduce a CheckTimeLocksMix helper (Antoine Poinsot)\ned45ee3882e69266d550b56ff69388e071f0ad1b miniscript: use optional instead of bool/outarg (Antoine Poinsot)\n1ab8d89fd1bdb3c0f2a506b4a10df6c23ba21c48 miniscript: make equality operator non-recursive (Antoine Poinsot)\n5922c662c08a061b3b3d5ac34a31f9f9d4640d47 scripted-diff: miniscript: rename 'nodetype' variables to 'fragment' (Antoine Poinsot)\nc5f65db0f03b52bc4525acae944173829290ce6f miniscript: remove a workaround for a GCC 4.8 bug (Antoine Poinsot)\n\nPull request description:\n\n  The Miniscript repository and the Miniscript integration PR here have been a moving target for the past months, and some final cleanups were done there that were not included here. I initially intended to add some small followup commits to #24148 but i think there are enough of them to be worth a followup PR on its own.\n\n  Some parts of the code did not change since it was initially written in 2019, and the code could use some modernization. (Use std::optional instead of out args, remove old compiler workarounds).\n  We refactored the helpers to be more meaningful, and also did some renaming. A new fuzz target was also added and both were merged in a single file. 2 more will be added in #24149 that will be contained in this file too.\n\n  The only behaviour change in this PR is to rule out Miniscript with duplicate keys from sane Miniscripts. In a P2WSH context, signatures can be rebounded (Miniscript does not use CODESEPARATOR) and it's reasonable to assume that reusing keys across the Script drops the malleability guarantees.\n  It was previously assumed such Miniscript would never exist in the first place since a compiler should never create them. We finally agreed that if one were to exist (say, written by hand or from a buggy compiler) it would be very confusing if an imported Miniscript descriptor (after #24148) with duplicate keys was deemed sane (ie, \"safe to use\") by Bitcoin Core. We now check for duplicate keys in the constructor.\n\n  This is (still) joint work with Pieter Wuille. (Actually he entirely authored the cleanups and code modernization.)\n\nACKs for top commit:\n  sipa:\n    utACK f3a50c9dfe645c548713e44e0eaf26ea9917a379 (with the caveat that a lot of it is my own code)\n  sanket1729:\n    code review ACK f3a50c9dfe645c548713e44e0eaf26ea9917a379. Did not review the fuzz tests.\n\nTree-SHA512: c043325e4936fe25e8ece4266b46119e000c6745f88cea530fed1edf01c80f03ee6f9edc83b6e9d42ca01688d184bad16bfd967c5bb8037744e726993adf3deb",
      "pushed_at": "2022-06-04T19:54:20Z"
    },
    {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2022-06-04T19:22:40Z"
      },
      "message": "Merge bitcoin/bitcoin#25065: [kernel 2c/n] Introduce `kernel::Context`, encapsulate global init/teardown\n\nd87784ac87364fc977bbf9769c8bdb72dea8cbf9 kernel: SanityChecks: Return an error struct (Carl Dong)\n265d6393bf9ef52e7ef7de97ca9c031da82a5ad1 Move init::SanityCheck to kernel::SanityCheck (Carl Dong)\nfed085a1a4cd2787202752b6a0d98e42dce97f09 init: Initialize globals with kernel::Context's life (Carl Dong)\n7d03feef8156ef37a4efa01dc591467bc7d957bf kernel: Introduce empty and unused kernel::Context (Carl Dong)\neeb4fc20c578b1e428a92d64cc9f8f903a677580 test: Use Set/UnsetGlobals in BasicTestingSetup (Carl Dong)\n\nPull request description:\n\n  The full `init/common.cpp` is dependent on things like ArgsManager (which we wish to remove from libbitcoinkernel in the future) and sanity checks. These aren't necessary for libbitcoinkernel so we only extract the portion that is necessary (namely `init::{Set,Unset}Globals()`.\n\nACKs for top commit:\n  theuni:\n    ACK d87784ac87364fc977bbf9769c8bdb72dea8cbf9\n  vasild:\n    ACK d87784ac87364fc977bbf9769c8bdb72dea8cbf9\n\nTree-SHA512: cd6b4923ea1865001b5f0caed9a4ff99c198d22bf74154d935dc09a47fda22ebe585ec912398cea69f722454ed1dbb4898faab5a2d02fb4c5e719c5c8d71a3f9",
      "pushed_at": "2022-06-04T19:25:57Z"
    },
    {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2022-06-04T09:42:26Z"
      },
      "message": "qt: Drop no longer supported Android architecture",
      "pushed_at": "2022-06-04T09:42:26Z"
    },
    {
      "author": {
        "name": "MacroFake",
        "email": "falke.marco@gmail.com",
        "date": "2022-06-03T06:46:40Z"
      },
      "message": "Merge bitcoin/bitcoin#25256: logging: fix logging empty thread name\n\n3a171f742c31addf5a343e8a6905054a1fbb12aa logging: fix logging empty threadname (klementtan)\n\nPull request description:\n\n  Currently, `leveldb` background thread does not have a thread name and as a result, an empty thread name is logged.\n\n  This PR fixes this by logging thread name as `\"unknown\"` if the thread name is empty\n\n  On master:\n  ```txt\n  2022-06-02T14:30:38Z [] [leveldb:debug] Generated table #281@0: 1862 keys, 138303 bytes\n  ```\n\n  On this PR:\n  ```txt\n  2022-06-02T14:30:38Z [unknown] [leveldb:debug] Generated table #281@0: 1862 keys, 138303 bytes\n  ```\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 3a171f742c31addf5a343e8a6905054a1fbb12aa\n  hebasto:\n    ACK 3a171f742c31addf5a343e8a6905054a1fbb12aa\n\nTree-SHA512: 0af0fa5c4ddd3640c6dab9595fe9d97f74d0e0f4b41287a6630cf8ac5a21240250e0659ec4ac5a561e888d522f5304bf627104de2aba0fd0a86c1222de0897c2",
      "pushed_at": "2022-06-03T06:46:53Z"
    },
    {
      "author": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2022-06-02T20:22:05Z"
      },
      "message": "Merge bitcoin/bitcoin#24171: p2p: Sync chain more readily from inbound peers during IBD\n\n48262a00f58489d705314ee3c31136133040bb0e Add functional test for block sync from inbound peers (Suhas Daftuar)\n0569b5c4bbf8f725e3969d76f7cb081cdf1e4195 Sync chain more readily from inbound peers during IBD (Suhas Daftuar)\n\nPull request description:\n\n  When in IBD, if the honest chain is only known by inbound peers, then we must\n  eventually sync from them in order to learn it. This change allows us to\n  perform initial headers sync and fetch blocks from inbound peers, if we have no\n  blocks in flight.\n\n  The restriction on having no blocks in flight means that we will naturally\n  throttle our block downloads to any such inbound peers that we may be\n  downloading from, until we leave IBD. This is a tradeoff between preferring\n  outbound peers for most of our block download, versus making sure we always\n  eventually will get blocks we need that are only known by inbound peers even\n  during IBD, as otherwise we may be stuck in IBD indefinitely (which could have\n  cascading failure on the network, if a large fraction of the network managed to\n  get stuck in IBD).\n\n  Note that the test in the second commit fails on master, without the first commit.\n\nACKs for top commit:\n  ajtowns:\n    ACK 48262a00f58489d705314ee3c31136133040bb0e\n  sipa:\n    ACK 48262a00f58489d705314ee3c31136133040bb0e\n\nTree-SHA512: ffad3a05fa9a32a92226843c9128f52c275e8d51930fde7368badc340227f2ed680561c4c9f2937b4e3bd722474464849ec9b624f912f5e380ce98d71b55764d",
      "pushed_at": "2022-06-02T20:35:05Z"
    },
    {
      "author": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2022-06-02T18:42:59Z"
      },
      "message": "Merge bitcoin/bitcoin#25267: test: check `replaceable` mismatch error in `createrawtransaction` RPC\n\n1bace0cfeef35c4413769474173a692093a046f3 test: check `replaceable` mismatch error in `createrawtransaction` RPC (Sebastian Falbesoner)\n\nPull request description:\n\n  This PR adds missing test coverage for the createrawtransaction RPC, in the case that the `replaceable` parameter is set, but the passed transaction doesn't signal RBF (i.e. no input's nSequence is < 0xffffffe):\n  https://github.com/bitcoin/bitcoin/blob/1c7ef0abd11f35a27cc860ceb7e075b78f53cecf/src/rpc/rawtransaction_util.cpp#L135-L137\n\nACKs for top commit:\n  laanwj:\n    Code review ACK 1bace0cfeef35c4413769474173a692093a046f3\n  brunoerg:\n    crACK 1bace0cfeef35c4413769474173a692093a046f3\n  furszy:\n    Code review ACK 1bace0cf\n\nTree-SHA512: e6390401c8026c782643e3de7be56ea1745736b7e4c8886186d75c353c301b57afdabb631b9d8e2770386e4d7a59ac5fba1f380b9a5a21296512ca4515b35baa",
      "pushed_at": "2022-06-02T18:43:26Z"
    },
    {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2022-06-02T17:34:14Z"
      },
      "message": "Merge bitcoin-core/gui#583: Add translator comments to `TransactionDesc::FormatTxStatus`\n\n8cfb5627d51ecaa1d1e92ec21e2ac56a380c77e6 qt, refactor: add translator comments in `TransactionDesc::FormatTxStatus()` (w0xlt)\n\nPull request description:\n\n  This PR adds translator comments to `TransactionDesc::FormatTxStatus` as suggested in https://github.com/bitcoin-core/gui/pull/552#discussion_r812602741 and https://github.com/bitcoin-core/gui/pull/552#issuecomment-1097294710.\n\nACKs for top commit:\n  hebasto:\n    ACK 8cfb5627d51ecaa1d1e92ec21e2ac56a380c77e6\n\nTree-SHA512: 2c44b915e6309508f34fc22bb90e3d88ad32ed82fdb3a395f7c6716941edc1b311991140d28e838ad622a7484ed86aedd25e55674857fec8716d9575aed25fa0",
      "pushed_at": "2022-06-02T17:36:40Z"
    },
    {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2022-06-02T17:14:16Z"
      },
      "message": "Merge bitcoin-core/gui#613: Remove unnecessary wallet includes from rpcconsole.cpp\n\n09942736495502cedcef4b097dde6abd9327fbdb qt: Remove unnecessary wallet includes from rpcconsole.cpp (laanwj)\n\nPull request description:\n\n  Fixes bitcoin/bitcoin#25266\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK 09942736495502cedcef4b097dde6abd9327fbdb\n  hebasto:\n    ACK 09942736495502cedcef4b097dde6abd9327fbdb.\n\nTree-SHA512: 02cef4a1f3522c4cd662853eb930dfdf0866a5bd959a00f4c42d8c741b0751df4cf2e14c304b93ca3ce699c0e9730caf3d6fa2053009af312c60e861b0f79179",
      "pushed_at": "2022-06-02T17:20:07Z"
    },
    {
      "author": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2022-06-02T17:08:20Z"
      },
      "message": "Merge bitcoin/bitcoin#24927: Add test util to populate mempool with random transactions, fix #24634 bug\n\nd2f8f1b307b056d1a54fb02a99da2cb664570904 use testing setup mempool in ComplexMemPool bench (glozow)\naecc332a71037812b7334a0ea72d0bcf8160c12f create and use mempool transactions using real coins in MempoolCheck (glozow)\n21187506311d1703d2bca21ccc17c3a921454b70 [test util] to populate mempool with random transactions/packages (glozow)\n5374dfc4e3da0e6a76f33b42966b4acf446233dc [test util] use -checkmempool for TestingSetup mempool check ratio (glozow)\nd7d9c7b2661d7f4292bfcdc389a806028fa2207d [test util] add chain name to TestChain100Setup ctor (glozow)\n\nPull request description:\n\n  Fixes #24634 by using the `testing_setup`'s actual mempool rather than a locally-declared mempool for running `check()`.\n\n  Also creates a test utility for populating the mempool with a bunch of random transactions. I imagine this could be useful in other places as well; it was necessary here because we needed the mempool to contain transactions *spending coins available in the current chainstate*. The existing `CreateOrderedCoins()` is insufficient because it creates coins out of thin air.\n\n  Also implements the separate suggestion to use the `TestingSetup` mempool in `ComplexMemPool` bench.\n\nACKs for top commit:\n  laanwj:\n    Code review ACK d2f8f1b307b056d1a54fb02a99da2cb664570904\n\nTree-SHA512: 44ab5a9e55b126b5a5bc33f05fbad1380b9c43c84736c7cf487be025e0e3f5d75216ccf5a3088b0935da817e3dacfba99d2885f75bcb6e7eaa24cd20a82c24c8",
      "pushed_at": "2022-06-02T17:08:43Z"
    },
    {
      "author": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2022-06-02T17:04:49Z"
      },
      "message": "Merge bitcoin/bitcoin#25264: kernel: pass params to BlockManager rather than using a global\n\na4741bd8d4b90b451d982d98eabd0dc5572baa29 kernel: pass params to BlockManager rather than using a global (Cory Fields)\n\nPull request description:\n\n  In a discussion today, dongcarl and I realized that is the only usage of the global `Params()` left in the kernel code.\n\n  We can use the readily available reference in `ChainstateManager` instead.\n\n  Note: There are still some uses of `BaseParams` in the kernel, so it doesn't make sense to rearrange the definitions quite yet. Once those are gone we can split the globals into new files.\n\nACKs for top commit:\n  MarcoFalke:\n    cr ACK a4741bd8d4b90b451d982d98eabd0dc5572baa29\n  laanwj:\n    Code review ACK a4741bd8d4b90b451d982d98eabd0dc5572baa29\n\nTree-SHA512: bfcc0c35e6c23689e968ccc96ceda39dd5a47fe94fbe617902110fe5865c30a40ea614bcfd4b4a2c846d2e84340aa8973e70b0938786af0fecfa3e6016d7fcad",
      "pushed_at": "2022-06-02T17:04:53Z"
    },
    {
      "author": {
        "name": "w0xlt",
        "email": "94266259+w0xlt@users.noreply.github.com",
        "date": "2022-02-21T19:17:00Z"
      },
      "message": "qt, refactor: add translator comments in `TransactionDesc::FormatTxStatus()`",
      "pushed_at": "2022-06-02T16:56:36Z"
    },
    {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2022-05-25T22:02:54Z"
      },
      "message": "kernel: SanityChecks: Return an error struct\n\nThis reduces libbitcoinkernel's coupling with ui_interface and\ntranslation.",
      "pushed_at": "2022-06-02T16:22:46Z"
    },
    {
      "author": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2022-06-02T16:16:02Z"
      },
      "message": "qt: Remove unnecessary wallet includes from rpcconsole.cpp",
      "pushed_at": "2022-06-02T16:17:33Z"
    },
    {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2022-05-27T20:47:05Z"
      },
      "message": "Move init::SanityCheck to kernel::SanityCheck",
      "pushed_at": "2022-06-02T15:42:12Z"
    },
    {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2022-05-25T18:31:54Z"
      },
      "message": "init: Initialize globals with kernel::Context's life\n\n...instead of explicitly calling init::{Set,Unset}Globals.\n\nCool thing about this is that in both the testing and bitcoin-chainstate\ncodepaths, we no longer need to explicitly unset globals. The\nkernel::Context goes out of scope and the globals are unset\n\"automatically\".\n\nAlso construct kernel::Context outside of AppInitSanityChecks()",
      "pushed_at": "2022-06-02T15:40:03Z"
    },
    {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2022-06-01T19:10:10Z"
      },
      "message": "kernel: pass params to BlockManager rather than using a global",
      "pushed_at": "2022-06-02T15:18:09Z"
    },
    {
      "author": {
        "name": "klementtan",
        "email": "klementtan@gmail.com",
        "date": "2022-05-31T15:28:16Z"
      },
      "message": "logging: fix logging empty threadname",
      "pushed_at": "2022-06-02T14:30:30Z"
    },
    {
      "author": {
        "name": "MacroFake",
        "email": "falke.marco@gmail.com",
        "date": "2022-06-02T11:05:12Z"
      },
      "message": "Merge bitcoin/bitcoin#24531: Use designated initializers\n\nfa72e0ba15c6382e9068be221ab4872bef000cbc Use designated initializers (MarcoFalke)\n\nPull request description:\n\n  Designated initializers are supported since gcc 4.7 (Our minimum required is 8) and clang 3 (Our minimum required is 7). They work out of the box with C++17, and only msvc requires the C++20 flag to be set. I don't expect any of our msvc users will run into issues due to this. See also https://bitcoin.jonasschnelli.ch/ircmeetings/logs/bitcoin-core-dev/2022/bitcoin-core-dev.2022-03-10-19.00.log.html#l-114\n\nACKs for top commit:\n  kristapsk:\n    ACK fa72e0ba15c6382e9068be221ab4872bef000cbc\n  hebasto:\n    ACK fa72e0ba15c6382e9068be221ab4872bef000cbc\n\nTree-SHA512: a198e9addd9af69262a7e79ae4377b55697c8dfe768b8b3d444526544b1d1f85df46f0ae81b7541bf2f73e5868fb944b159e5bf234303c7b8b9d778afb0b2840",
      "pushed_at": "2022-06-02T11:05:29Z"
    },
    {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2022-06-01T22:58:47Z"
      },
      "message": "test: check `replaceable` mismatch error in `createrawtransaction` RPC",
      "pushed_at": "2022-06-02T10:59:13Z"
    },
    {
      "author": {
        "name": "MacroFake",
        "email": "falke.marco@gmail.com",
        "date": "2022-06-01T18:16:01Z"
      },
      "message": "Merge bitcoin/bitcoin#25262: test: Set maxfeerate=0 in MiniWallet sendrawtransaction()\n\nfafaad98f785d763848c546d096e6738d507709e test: Set maxfeerate=0 in MiniWallet sendrawtransaction() (MacroFake)\n\nPull request description:\n\n  It should be safe to set, because MiniWallet will only ever deal with test transactions, so loss-of-funds is not a reason to keep the feerate check.\n\n  It is beneficial to set, as it makes tests less verbose to write. Also, it may speed up tests, as the fee-check can be skipped: https://github.com/bitcoin/bitcoin/pull/25087#discussion_r877246529\n\nACKs for top commit:\n  michaelfolkson:\n    ACK fafaad98f785d763848c546d096e6738d507709e\n  theStack:\n    Code-review ACK fafaad98f785d763848c546d096e6738d507709e\n\nTree-SHA512: 94c5c163595207a295c7b21f0127d669a9307f6f8b1de5e043d43c52a6714076e2fdce65f2644308a2b90c679642c94f771dab1ff8bc5c0c8b1f5013324b3902",
      "pushed_at": "2022-06-01T18:16:04Z"
    },
    {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2022-06-01T18:13:37Z"
      },
      "message": "Merge bitcoin/bitcoin#25249: Bump univalue subtree\n\n025c6ca509f9e3975505d9fd786a4ca73a3a3a2d Squashed 'src/univalue/' changes from 6c19d050a9..de4f73ddca (MacroFake)\n9b50a309ff21b0d5d85ded8b67cb08ae2e75fe84 refactor: Replace get_int by getInt<int> alias (MacroFake)\ne4e8186ab41c897b8a849dba25ae44475fe60550 refactor: Explicitly convert atomic<int> to int (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This bumps the univalue subtree and changes two lines of our code. Apart from the get_int -> getInt change, this is mostly a rebase of https://github.com/bitcoin/bitcoin/pull/15975, which was closed back then.\n\n  However, given the numerous UniValue copy bugs and performance regressions in the past years, I think it makes sense to finally go through with the changes and disable potentially expensive implicit UniValue copies, which may cause OOM.\n\n  The changes here are not strictly required for that, but make future changes less verbose and easier to review.\n\nACKs for top commit:\n  laanwj:\n    Code review ACK fa0cc61b7f79b1844ac0fb3831e606a1ba861c15\n  fanquake:\n    ACK fa0cc61b7f79b1844ac0fb3831e606a1ba861c15\n\nTree-SHA512: 9ab9e371e6a745a80c441e99fb9cd407602a8066df883135e0ea7eced7b0c6ef0e9bc88f1d99a2b4804128d636727229f44d72b5615dbf2d70da4af63fa6adec",
      "pushed_at": "2022-06-01T18:13:43Z"
    },
    {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2022-03-11T09:14:31Z"
      },
      "message": "Use designated initializers",
      "pushed_at": "2022-06-01T18:06:01Z"
    },
    {
      "author": {
        "name": "MacroFake",
        "email": "falke.marco@gmail.com",
        "date": "2022-06-01T15:05:13Z"
      },
      "message": "test: Set maxfeerate=0 in MiniWallet sendrawtransaction()",
      "pushed_at": "2022-06-01T15:07:05Z"
    }
  ],
  "releases": [
    {
      "name": "Bitcoin Core 23.0",
      "published_at": "2022-04-25T14:17:32Z",
      "message": "Bitcoin Core version 23.0 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-23.0/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-23.0.md\r\n\r\nDo not use the links provided by GitHub, rather use the above download links, they are guaranteed to be generated deterministically and signed.",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 22.0",
      "published_at": "2021-09-14T11:32:48Z",
      "message": "Bitcoin Core version 22.0 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-22.0/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-22.0.md\r\n\r\nDo not use the links provided by GitHub, rather use the above download links, they are guaranteed to be generated deterministically and signed.",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.21.1",
      "published_at": "2021-05-03T01:33:04Z",
      "message": "Bitcoin Core version 0.21.1 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.21.1/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.21.1.md\r\n\r\nPreferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "fanquake"
    },
    {
      "name": "Bitcoin Core 0.21.0",
      "published_at": "2021-01-15T19:52:11Z",
      "message": "Bitcoin Core version 0.21.0 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.21.0/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.21.0.md\r\n\r\nPreferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.20.1",
      "published_at": "2020-08-02T07:52:16Z",
      "message": "Bitcoin Core version 0.20.1 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.20.1/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.20.1.md\r\n\r\nPreferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.",
      "author_username": "MarcoFalke"
    },
    {
      "name": "Bitcoin Core 0.20.0",
      "published_at": "2020-06-03T11:28:21Z",
      "message": "Bitcoin Core version 0.20.0 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.20.0/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.20.0.md\r\n\r\nPreferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.19.1",
      "published_at": "2020-03-09T19:58:58Z",
      "message": "Bitcoin Core version 0.19.1 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.19.1/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.19.1.md\r\n\r\nPreferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.19.0.1",
      "published_at": "2019-11-24T13:26:31Z",
      "message": "Bitcoin Core version 0.19.0.1 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.19.0.1/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.19.0.1.md\r\n\r\nPreferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.18.1",
      "published_at": "2019-08-09T18:53:34Z",
      "message": "Bitcoin Core version 0.18.1 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.18.1/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.18.1.md\r\n\r\nPreferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.18.0",
      "published_at": "2019-05-18T18:22:20Z",
      "message": "Bitcoin Core version 0.18.0 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.18.0/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.18.0.md\r\n\r\nPreferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.17.1",
      "published_at": "2018-12-25T09:36:21Z",
      "message": "Bitcoin Core version 0.17.1 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.17.1/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.1.md\r\n\r\nPreferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.17.0.1",
      "published_at": "2018-11-06T08:34:16Z",
      "message": "Bitcoin Core version 0.17.0.1 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.17.0.1/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.1.md\r\n\r\nPreferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.17.0",
      "published_at": "2018-10-03T09:22:37Z",
      "message": "Bitcoin Core version 0.17.0 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.17.0/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md\r\n\r\nPreferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.14.3",
      "published_at": "2018-09-28T15:29:44Z",
      "message": "Bitcoin Core version 0.14.3 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.14.3/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.14.3.md\r\n\r\nPreferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.15.2",
      "published_at": "2018-09-28T15:30:19Z",
      "message": "Bitcoin Core version 0.15.2 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.15.2/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.15.2.md\r\n\r\nPreferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.16.3",
      "published_at": "2018-09-18T21:14:45Z",
      "message": "Bitcoin Core version 0.16.3 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.16.3/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.16.3.md\r\n\r\nPreferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.16.2",
      "published_at": "2018-07-29T17:04:40Z",
      "message": "Bitcoin Core version 0.16.2 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.16.2/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.16.2.md\r\n\r\nPreferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.16.1",
      "published_at": "2018-06-15T16:35:36Z",
      "message": "Bitcoin Core version 0.16.1 is now available from:\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.16.1/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.16.1.md\r\n\r\nPreferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.\r\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.16.0",
      "published_at": "2018-02-26T11:59:39Z",
      "message": "Bitcoin Core version 0.16.0 is now available from:\r\n\r\nhttps://bitcoin.org/bin/bitcoin-core-0.16.0/\r\n\r\nand\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.16.0/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.16.0.md\r\n\r\nPreferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.15.1",
      "published_at": "2017-11-11T14:24:25Z",
      "message": "Bitcoin Core version 0.15.1 is now available from:\r\n\r\nhttps://bitcoin.org/bin/bitcoin-core-0.15.1/\r\n\r\nand\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.15.1/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.15.1.md\r\n\r\nPreferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically and GitHub's are not.",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.15.0.1",
      "published_at": "2017-09-19T13:05:50Z",
      "message": "Bitcoin Core version 0.15.0.1 is now available from:\r\n\r\nhttps://bitcoin.org/bin/bitcoin-core-0.15.0.1/\r\n\r\nand\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.15.0.1/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.15.0.1.md\r\n\r\nPreferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically and GitHub's are not.",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.15.0",
      "published_at": "2017-09-14T14:34:57Z",
      "message": "Bitcoin Core version 0.15.0 is now available from:\r\n\r\nhttps://bitcoin.org/bin/bitcoin-core-0.15.0/\r\n\r\nand\r\n\r\nhttps://bitcoincore.org/bin/bitcoin-core-0.15.0/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.15.0.md\r\n\r\nPreferably use the above download link, not the below links to download the source tarball, as the release tarballs are generated deterministically and GitHubs's are not.",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core 0.14.2",
      "published_at": "2017-06-18T08:42:37Z",
      "message": "Bitcoin Core version 0.14.2 is now available from:\r\n\r\n  https://bitcoin.org/bin/bitcoin-core-0.14.2/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.14.2.md",
      "author_username": "MarcoFalke"
    },
    {
      "name": "Bitcoin Core 0.14.1",
      "published_at": "2017-04-22T14:19:24Z",
      "message": "Bitcoin Core version 0.14.1 is now available from:\r\n\r\n  https://bitcoin.org/bin/bitcoin-core-0.14.1/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.14.1.md",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core v0.14.0",
      "published_at": "2017-03-08T15:20:25Z",
      "message": "Bitcoin Core version 0.14.0 is now available from:\r\n\r\n  https://bitcoin.org/bin/bitcoin-core-0.14.0/\r\n\r\nFor the release notes please see the git repository:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.14.0.md",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core v0.13.2",
      "published_at": "2017-01-03T10:48:14Z",
      "message": "Bitcoin Core version 0.13.2 is now available from:\n\n  https://bitcoin.org/bin/bitcoin-core-0.13.2/\n\nFor the release notes please see the git repository:\n\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.13.2.md\n",
      "author_username": "laanwj"
    },
    {
      "name": "Bitcoin Core v0.13.1",
      "published_at": "2016-11-01T19:23:04Z",
      "message": "Bitcoin Core version 0.13.1 is now available from:\n\n  https://bitcoin.org/bin/bitcoin-core-0.13.1/\n\nFor the release notes please see the git repository:\n\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.13.1.md\n",
      "author_username": "sipa"
    },
    {
      "name": "Bitcoin Core v0.13.0",
      "published_at": "2016-11-01T19:25:12Z",
      "message": "Bitcoin Core version 0.13.0 is now available from:\n\n  https://bitcoin.org/bin/bitcoin-core-0.13.0/\n\nFor the release notes please see the git repository:\n\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.13.0.md\n",
      "author_username": "sipa"
    },
    {
      "name": "Bitcoin Core v0.12.1",
      "published_at": "2016-11-01T19:25:45Z",
      "message": "Bitcoin Core version 0.12.1 is now available from:\n\n  https://bitcoin.org/bin/bitcoin-core-0.12.1/\n\nFor the release notes please see the git repository:\n\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.12.1.md\n",
      "author_username": "sipa"
    },
    {
      "name": "Bitcoin Core v0.12.0",
      "published_at": "2016-11-01T19:26:15Z",
      "message": "Bitcoin Core version 0.12.0 is now available from:\n\n  https://bitcoin.org/bin/bitcoin-core-0.12.0/\n\nFor the release notes please see the git repository:\n\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.12.0.md\n",
      "author_username": "sipa"
    }
  ],
  "issues": [
    {
      "title": "[kernel 3a/n] Decouple `CTxMemPool` from `ArgsManager`",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25290",
      "state": "open",
      "created_at": "2022-06-07T01:59:02Z",
      "closed_at": null,
      "comments": []
    },
    {
      "title": "test: implement 'bech32m' mode for `getnewdestination()` helper",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25289",
      "state": "open",
      "created_at": "2022-06-07T00:13:17Z",
      "closed_at": null,
      "comments": []
    },
    {
      "title": "test: Reliably don't start itself (lint-all.py runs all tests twice)",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25288",
      "state": "open",
      "created_at": "2022-06-06T17:18:32Z",
      "closed_at": null,
      "comments": [
        {
          "user": "theStack",
          "created_at": "2022-06-06T19:44:57Z",
          "author_association": "CONTRIBUTOR",
          "body": "Concept ACK. Good catch!"
        }
      ]
    },
    {
      "title": "logging: threshold log level",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25287",
      "state": "open",
      "created_at": "2022-06-06T17:01:08Z",
      "closed_at": null,
      "comments": [
        {
          "user": "jonatack",
          "created_at": "2022-06-06T17:12:23Z",
          "author_association": "MEMBER",
          "body": "Concept ACK. I'm glad to see a category-specific config option. These should probably be added to the logging RPC as well in a follow-up.  "
        }
      ]
    },
    {
      "title": "scripted-diff: remove duplicate categories from LogPrint output",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25286",
      "state": "open",
      "created_at": "2022-06-06T16:48:16Z",
      "closed_at": null,
      "comments": [
        {
          "user": "klementtan",
          "created_at": "2022-06-06T17:14:39Z",
          "author_association": "CONTRIBUTOR",
          "body": "crACK d40550d725fa7afd6916510164bbaa95e3ec0a5f\r\n\r\nManually verified that the script correctly remove duplicate categories from LogPrint output"
        }
      ]
    },
    {
      "title": "Add AutoFile without ser-type and ser-version and use it where possible",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25285",
      "state": "open",
      "created_at": "2022-06-06T16:04:53Z",
      "closed_at": null,
      "comments": [
        {
          "user": "laanwj",
          "created_at": "2022-06-06T16:36:20Z",
          "author_association": "MEMBER",
          "body": "Concept ACK"
        }
      ]
    },
    {
      "title": "[WIP] consensus: Remove dependency on net (BIP 155 / ADDRV2_FORMAT)",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25284",
      "state": "open",
      "created_at": "2022-06-06T13:04:43Z",
      "closed_at": null,
      "comments": [
        {
          "user": "vasild",
          "created_at": "2022-06-06T13:44:20Z",
          "author_association": "CONTRIBUTOR",
          "body": "Concept ACK"
        }
      ]
    },
    {
      "title": "Bugfix: configure: Define default for use_libevent",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25282",
      "state": "open",
      "created_at": "2022-06-05T21:49:40Z",
      "closed_at": null,
      "comments": [
        {
          "user": "DrahtBot",
          "created_at": "2022-06-06T07:03:00Z",
          "author_association": "CONTRIBUTOR",
          "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24291](https://github.com/bitcoin/bitcoin/pull/24291) (build: Remove negated --enable-fuzz checks from build system by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first."
        }
      ]
    },
    {
      "title": "build: Remove unused `LIBBITCOIN_KERNEL` variable",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25281",
      "state": "open",
      "created_at": "2022-06-05T19:45:32Z",
      "closed_at": null,
      "comments": []
    },
    {
      "title": "[refactor] use ITEMS macro to unify NetMsgType, allNetMessageTypes lists",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25275",
      "state": "open",
      "created_at": "2022-06-04T18:51:24Z",
      "closed_at": null,
      "comments": [
        {
          "user": "DrahtBot",
          "created_at": "2022-06-05T05:22:41Z",
          "author_association": "CONTRIBUTOR",
          "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23443](https://github.com/bitcoin/bitcoin/pull/23443) (p2p: Erlay support signaling by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first."
        }
      ]
    },
    {
      "title": "[WIP] add free list to unordered map",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25274",
      "state": "open",
      "created_at": "2022-06-03T20:50:42Z",
      "closed_at": null,
      "comments": [
        {
          "user": "DrahtBot",
          "created_at": "2022-06-04T00:44:55Z",
          "author_association": "CONTRIBUTOR",
          "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17487](https://github.com/bitcoin/bitcoin/pull/17487) (coins: allow write to disk without cache drop by jamesob)\n* [#9384](https://github.com/bitcoin/bitcoin/pull/9384) (CCoinsViewCache code cleanup & deduplication by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first."
        },
        {
          "user": "martinus",
          "created_at": "2022-06-04T06:03:12Z",
          "author_association": "CONTRIBUTOR",
          "body": "I'm not sure if that approach will be a net benefit. One of the main advantages of the allocator in #22702 is that not every node has to be malloced', saving the considerable memory overhead. I think the only way to get rid of the many `std::unordered_map` allocations is to use a custom allocator.\r\n\r\nAnother approach to hold on to the memory that should in theory do all what's done in #22702 is to just use `std::pmr::unsynchronized_pool_resource`: That memory resource has a pool which holds on to its memory until it is destroyed, exactly like my node_allocator. I don't know though how its implemented or what memory overhead individual allocations have. https://en.cppreference.com/w/cpp/memory/unsynchronized_pool_resource\r\n\r\nUsage would be relatively simple, like so:\r\n\r\n```cpp\r\nusing CCoinsMap = std::pmr::unordered_map<COutPoint, CCoinsCacheEntry, SaltedOutpointHasher>;\r\n\r\nauto options = std::pmr::pool_options();\r\noptions.largest_required_pool_block = 128; // TODO no idea what good values are\r\noptions.max_blocks_per_chunk = 262144 / options.largest_required_pool_block;  // TODO no idea what good values are\r\n\r\nauto mr = std::pmr::unsynchronized_pool_resource();\r\nauto map = CCoinsMap{0, SaltedOutpointHasher{}, std::equal_to<COutPoint>{}, &mr};\r\n```\r\n\r\nI did some rudimentary benchmarking with this, but this seemed to be even slower than a plain `std::unordered_map` so I didn't follow this more closely."
        }
      ]
    },
    {
      "title": "wallet: Pass through transaction locktime and preset input sequences and scripts to CreateTransaction",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25273",
      "state": "open",
      "created_at": "2022-06-03T18:58:15Z",
      "closed_at": null,
      "comments": [
        {
          "user": "DrahtBot",
          "created_at": "2022-06-04T00:47:56Z",
          "author_association": "CONTRIBUTOR",
          "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25218](https://github.com/bitcoin/bitcoin/pull/25218) (refactor: introduce generic 'Result' classes and connect them to CreateTransaction and GetNewDestination by furszy)\n* [#25118](https://github.com/bitcoin/bitcoin/pull/25118) (wallet: unify \u201callow/block other inputs\u201c concept by furszy)\n* [#24897](https://github.com/bitcoin/bitcoin/pull/24897) ([Draft / POC] Silent Payments by w0xlt)\n* [#24649](https://github.com/bitcoin/bitcoin/pull/24649) (wallet: do not count wallet utxos as external by S3RK)\n* [#24128](https://github.com/bitcoin/bitcoin/pull/24128) (wallet: BIP 326 sequence based anti-fee-snipe for taproot inputs by MarcoFalke)\n* [#23475](https://github.com/bitcoin/bitcoin/pull/23475) (wallet: add config to prioritize a solution that doesn't create change in coin selection by brunoerg)\n* [#21283](https://github.com/bitcoin/bitcoin/pull/21283) (Implement BIP 370 PSBTv2 by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first."
        }
      ]
    },
    {
      "title": "wallet: guard and alert about a wallet invalid state during chain sync",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25272",
      "state": "open",
      "created_at": "2022-06-03T14:06:15Z",
      "closed_at": null,
      "comments": [
        {
          "user": "furszy",
          "created_at": "2022-06-03T15:53:26Z",
          "author_association": "CONTRIBUTOR",
          "body": "Update:\r\nAdded test coverage for it in the first commit. Showing how the wallet can end up in the invalid state. The second commit corrects it with the proposed solution."
        },
        {
          "user": "DrahtBot",
          "created_at": "2022-06-04T15:58:07Z",
          "author_association": "CONTRIBUTOR",
          "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24897](https://github.com/bitcoin/bitcoin/pull/24897) ([Draft / POC] Silent Payments by w0xlt)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first."
        },
        {
          "user": "jonatack",
          "created_at": "2022-06-06T15:11:53Z",
          "author_association": "MEMBER",
          "body": "Concept ACK"
        },
        {
          "user": "furszy",
          "created_at": "2022-06-06T19:31:29Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks for the feedback!\r\n\r\nApplied the following changes:\r\n\r\n1) Moved `dynamic_cast` to `static_cast`.\r\n2) Set same default value for \"m_pass\" field in both classes `FailDatabase` and `FailBatch`.\r\n3) Shorted the commit subject."
        }
      ]
    },
    {
      "title": "Allow groups of accounts to access the RPC cookie file",
      "pull_request": null,
      "state": "open",
      "created_at": "2022-06-02T23:44:41Z",
      "closed_at": null,
      "comments": [
        {
          "user": "1440000bytes",
          "created_at": "2022-06-03T02:12:34Z",
          "author_association": "CONTRIBUTOR",
          "body": "Have you tried RPC whitelists? https://github.com/bitcoin/bitcoin/pull/12763"
        },
        {
          "user": "alevchuk",
          "created_at": "2022-06-03T05:07:54Z",
          "author_association": "NONE",
          "body": "> Have you tried RPC whitelists? #12763\r\n\r\nWhitelists use rpcauth which sends the password in clear text to the server https://github.com/bitcoin/bitcoin/blob/0de36941eca1bff91420dd878eb097db2b1a596c/src/httprpc.cpp#L130\r\n\r\nThis unlike the cookie file is not resilient to [server spoofing attack](https://github.com/Kixunil/security_writings/blob/master/cookie_files.md). Basically if my grafana Linux user gets compromised then it can get the password for every bitcoin RPC user. \r\n\r\n\r\nIn my case both RPC users have a wide variety of methods that need to be available, so locking down with rpc whitelists would not help much. I would not choose that over keeping random users out.  \r\n\r\n\r\n"
        },
        {
          "user": "ryanofsky",
          "created_at": "2022-06-03T17:12:11Z",
          "author_association": "CONTRIBUTOR",
          "body": "Agree it would be useful to set permissions on the cookie file, and this would be a simple feature to implement. But I don't think it would be right to say rpcauth is less secure than cookie auth.\r\n\r\nThe main advantage cookies have over RPC passwords is just their convenience. Other than being generated randomly each restart, they don't provide extra security. You could write a script to randomly generate new passwords for grafana each time bitcoin is restarted to get the same effect as using a cookie.\r\n\r\nRPC passwords also have an advantage over cookies because they are hashed. So if an attacker manages to get read access to the bitcoin directory, they can't easily use password hashes to connect to the server, while they could straightforwardly use the cookie file to connect.\r\n\r\nAlso it looks like depending on your setup you may be able control permissions of the cookie file in current versions of bitcoind by running `umask 0027` and passing `-sysperms` argument."
        },
        {
          "user": "darosior",
          "created_at": "2022-06-06T12:25:31Z",
          "author_association": "MEMBER",
          "body": "I agree this would be nice to have. I personally use ACLs to achieve the same."
        }
      ]
    },
    {
      "title": "wallet: re-activate the not triggered  \"AmountWithFeeExceedsBalance\" error",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25269",
      "state": "open",
      "created_at": "2022-06-02T14:17:15Z",
      "closed_at": null,
      "comments": [
        {
          "user": "DrahtBot",
          "created_at": "2022-06-02T16:36:51Z",
          "author_association": "CONTRIBUTOR",
          "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25218](https://github.com/bitcoin/bitcoin/pull/25218) (refactor: introduce generic 'Result' classes and connect them to CreateTransaction and GetNewDestination by furszy)\n* [#25183](https://github.com/bitcoin/bitcoin/pull/25183) (rpc: Segwit-only inputs option for fundrawtransaction by aureleoules)\n* [#25118](https://github.com/bitcoin/bitcoin/pull/25118) (wallet: unify \u201callow/block other inputs\u201c concept by furszy)\n* [#25005](https://github.com/bitcoin/bitcoin/pull/25005) (wallet: remove extra wtx lookup in 'AvailableCoins' + several code cleanups. by furszy)\n* [#24699](https://github.com/bitcoin/bitcoin/pull/24699) (wallet: Improve AvailableCoins performance by reducing duplicated operations by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first."
        }
      ]
    },
    {
      "title": "refactor: Introduce EvictionManager",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25268",
      "state": "open",
      "created_at": "2022-06-02T12:34:15Z",
      "closed_at": null,
      "comments": [
        {
          "user": "DrahtBot",
          "created_at": "2022-06-02T16:39:54Z",
          "author_association": "CONTRIBUTOR",
          "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25203](https://github.com/bitcoin/bitcoin/pull/25203) (logging: update to severity-based logging by jonatack)\n* [#24970](https://github.com/bitcoin/bitcoin/pull/24970) (net processing: Move cleanSubVer, fPreferredDownload and nLocalHostNonce to Peer by jnewbery)\n* [#24170](https://github.com/bitcoin/bitcoin/pull/24170) (p2p, rpc: Manual block-relay-only connections with addnode by mzumsande)\n* [#23443](https://github.com/bitcoin/bitcoin/pull/23443) (p2p: Erlay support signaling by naumenkogs)\n* [#21878](https://github.com/bitcoin/bitcoin/pull/21878) (Make all networking code mockable by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first."
        },
        {
          "user": "jnewbery",
          "created_at": "2022-06-03T10:20:43Z",
          "author_association": "MEMBER",
          "body": "Concept ACK. Very nice!"
        }
      ]
    },
    {
      "title": "Setting torcontrol overrides proxy address",
      "pull_request": null,
      "state": "open",
      "created_at": "2022-06-01T23:28:24Z",
      "closed_at": null,
      "comments": []
    },
    {
      "title": "build: pass minisketch cppflags only where needed",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25263",
      "state": "open",
      "created_at": "2022-06-01T15:13:22Z",
      "closed_at": null,
      "comments": []
    },
    {
      "title": "rpc: fetch multiple headers in getblockheader()",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25261",
      "state": "open",
      "created_at": "2022-06-01T14:02:56Z",
      "closed_at": null,
      "comments": [
        {
          "user": "MarcoFalke",
          "created_at": "2022-06-01T15:57:36Z",
          "author_association": "MEMBER",
          "body": "Please squash your commits according to https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits"
        },
        {
          "user": "JeremyRubin",
          "created_at": "2022-06-01T18:02:50Z",
          "author_association": "CONTRIBUTOR",
          "body": "I think it makes sense to do count = 0 as a single entity, and >= 1 as an array, or otherwise make an additional as_array bool param to control the output type.\r\n\r\nOtherwise the \"type instability\" is difficult to deal with for downstream consumers of the API. E.g., consider the code for https://docs.rs/bitcoincore-rpc/latest/src/bitcoincore_rpc/client.rs.html#337-341 ."
        },
        {
          "user": "natanleung",
          "created_at": "2022-06-01T18:54:32Z",
          "author_association": "NONE",
          "body": "> I think it makes sense to do count = 0 as a single entity, and >= 1 as an array, or otherwise make an additional as_array bool param to control the output type.\r\n> \r\n> Otherwise the \"type instability\" is difficult to deal with for downstream consumers of the API. E.g., consider the code for https://docs.rs/bitcoincore-rpc/latest/src/bitcoincore_rpc/client.rs.html#337-341 .\r\n\r\nThanks for the reply. Note that there is no regression impact because all preexisting functionality is intact. Ultimately, it is an optional parameter which can be ignored.\r\n\r\nTo me, `count = 0` is a bit counterintuitive. And as mentioned above, the REST call also interprets `count = 0` as invalid, assuming we are aiming to emulate an improved version of the REST functionality in RPC.\r\n\r\nFrom the old PR, it would appear that we are tending away from the unformatted (concatenated) output in new implementation. If this is indeed the case, then such an additional parameter does not make seem useful.\r\n\r\n@MarcoFalke Do you have any input on this? And are any further updates to the PR needed at this point? All CI checks have passed. Thanks."
        },
        {
          "user": "MarcoFalke",
          "created_at": "2022-06-01T18:57:20Z",
          "author_association": "MEMBER",
          "body": "What about:\r\n\r\n* null -> \"flat\" reply\r\n* int -> array reply"
        },
        {
          "user": "natanleung",
          "created_at": "2022-06-01T19:39:02Z",
          "author_association": "NONE",
          "body": "> What about:\r\n> \r\n> * null -> \"flat\" reply\r\n> * int -> array reply\r\n\r\n@JeremyRubin's suggestion has been implemented. I think I misunderstood the difference between `count = 0` and `count = 1` in terms of the \"type instability\". It makes sense to me now.\r\n\r\nAs you've denoted, this is now resolved such that:\r\n`count = 0` -> \"flat\" reply\r\n`count > 0` -> array reply\r\n\r\nLet me know if any other changes are still needed. Thanks."
        },
        {
          "user": "JeremyRubin",
          "created_at": "2022-06-01T20:34:20Z",
          "author_association": "CONTRIBUTOR",
          "body": "Yeah that makes sense. Null = flat works too. Idea isn't to concatenate anything, but rather to provide support for legacy behavior and something that matches the REST API. Since 0 is invalid in rest, all valid queries in JSON will match all valid rest queries, and legacy count=0 queries will return flat.\r\n\r\nIf we were to do a breaking API change, i'd say *always* return array :)"
        },
        {
          "user": "natanleung",
          "created_at": "2022-06-03T04:45:11Z",
          "author_association": "NONE",
          "body": "@MarcoFalke I believe that we have finalized the design. I have also updated the description. Let me know if there is anything else that is needed for this PR. Thanks."
        }
      ]
    },
    {
      "title": "Parallel compact block download",
      "pull_request": null,
      "state": "open",
      "created_at": "2022-05-31T21:08:24Z",
      "closed_at": null,
      "comments": []
    },
    {
      "title": "Move minRelayTxFee to policy/settings",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25254",
      "state": "open",
      "created_at": "2022-05-31T13:08:29Z",
      "closed_at": null,
      "comments": [
        {
          "user": "DrahtBot",
          "created_at": "2022-06-01T10:21:43Z",
          "author_association": "CONTRIBUTOR",
          "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24513](https://github.com/bitcoin/bitcoin/pull/24513) (CChainState -> Chainstate by jamesob)\n* [#23076](https://github.com/bitcoin/bitcoin/pull/23076) (Pass CFeeRate and CTxMemPool in-params by reference to const by jonatack)\n* [#17786](https://github.com/bitcoin/bitcoin/pull/17786) (refactor: Nuke policy/fees->mempool circular dependencies by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first."
        }
      ]
    },
    {
      "title": "Consolidate Windows ASLR workarounds for upstream secp256k1 changes",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25251",
      "state": "open",
      "created_at": "2022-05-30T19:18:06Z",
      "closed_at": null,
      "comments": [
        {
          "user": "hebasto",
          "created_at": "2022-05-30T19:25:22Z",
          "author_association": "MEMBER",
          "body": "Maybe the oldest `binutils` used for cross-compiling [do not require](https://github.com/bitcoin/bitcoin/pull/23360#issuecomment-952562953) any ASLR workarounds?"
        },
        {
          "user": "fanquake",
          "created_at": "2022-05-30T19:30:39Z",
          "author_association": "MEMBER",
          "body": "> Maybe the oldest binutils used for cross-compiling https://github.com/bitcoin/bitcoin/pull/23360#issuecomment-952562953 any ASLR workarounds?\r\n\r\nI've outlined in the commits which versions of binutils are affected by the bug, and that includes, for example, the version shipped with Ubuntu Focal, which is almost certainly still used to cross-compile WIndows binaries. The comment you've linked too, says to update the doc to mention that version that includes the fix, which has been done here."
        },
        {
          "user": "hebasto",
          "created_at": "2022-05-30T19:32:59Z",
          "author_association": "MEMBER",
          "body": "Concept ACK."
        },
        {
          "user": "laanwj",
          "created_at": "2022-05-31T07:11:01Z",
          "author_association": "MEMBER",
          "body": "Concept ACK\r\n\r\nThis is more elegant. Exporting only the entry point makes much more sense than exporting secp256k1 symbols. Although it can't hurt (no one dynloads a binary, i'd hope!), it could be a risk for shared libraries where the symbols could interfere.\r\n\r\nEdit:\r\n\r\n> Although it can't hurt (no one dynloads a binary, i'd hope!)\r\n\r\nWait, I'm wrong here. It could hurt, if we dynamically link against libraries that (directly or indirectly) use another version of secp256k1. I remember we had a problem like this with OpenSSL a long time ago where our statically linked version of OpenSSL conflicted with the one Qt was using. It's quite an edge case though :smile:  But it's always better to err on the safe side, I mean."
        },
        {
          "user": "fanquake",
          "created_at": "2022-05-31T07:47:34Z",
          "author_association": "MEMBER",
          "body": "cc also @real-or-random @jonasnick "
        },
        {
          "user": "theuni",
          "created_at": "2022-05-31T13:40:49Z",
          "author_association": "MEMBER",
          "body": "ACK with or without the [suggestion here](https://github.com/bitcoin/bitcoin/pull/25251#discussion_r885277583)."
        },
        {
          "user": "theuni",
          "created_at": "2022-05-31T13:43:35Z",
          "author_association": "MEMBER",
          "body": "\r\n> Wait, I'm wrong here. It could hurt, if we dynamically link against libraries that (directly or indirectly) use another version of secp256k1. I remember we had a problem like this with OpenSSL a long time ago where our statically linked version of OpenSSL conflicted with the one Qt was using. It's quite an edge case though \ud83d\ude04 But it's always better to err on the safe side, I mean.\r\n\r\nThanks so much for this reminder, I had forgotten about this edge case! Very helpful to keep in mind."
        },
        {
          "user": "DrahtBot",
          "created_at": "2022-06-02T12:44:38Z",
          "author_association": "CONTRIBUTOR",
          "body": "<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit 5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9<br>(master) | commit f37b9af9646c15277257c5ac089bf648661f8bb6<br>(master and this pull) |\n|--|--|--|\n| SHA256SUMS.part | [`48da0fae4f3c828d...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/SHA256SUMS.part) | [`70479e95e6f3b20e...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/SHA256SUMS.part) |\n| *-aarch64-linux-gnu-debug.tar.gz | [`c05d18eb70d358f2...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-aarch64-linux-gnu-debug.tar.gz) | [`08939403fb4691a1...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-aarch64-linux-gnu-debug.tar.gz) |\n| *-aarch64-linux-gnu.tar.gz | [`0194c2ddbba2e739...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-aarch64-linux-gnu.tar.gz) | [`3ebff07596d4c6d7...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-aarch64-linux-gnu.tar.gz) |\n| *-arm-linux-gnueabihf-debug.tar.gz | [`849bd24df6cf4bc1...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-arm-linux-gnueabihf-debug.tar.gz) | [`74b23e24601531df...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-arm-linux-gnueabihf-debug.tar.gz) |\n| *-arm-linux-gnueabihf.tar.gz | [`c4e68fae5594ba3a...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-arm-linux-gnueabihf.tar.gz) | [`cbe3285b4d34aae4...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-arm-linux-gnueabihf.tar.gz) |\n| *-arm64-apple-darwin-unsigned.dmg | [`c9a2bc0f65b20bae...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-arm64-apple-darwin-unsigned.dmg) | [`7d4937ae4fe1417d...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-arm64-apple-darwin-unsigned.dmg) |\n| *-arm64-apple-darwin-unsigned.tar.gz | [`a8fedf69253c2295...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-arm64-apple-darwin-unsigned.tar.gz) | [`77c7f2934488ca28...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-arm64-apple-darwin-unsigned.tar.gz) |\n| *-arm64-apple-darwin.tar.gz | [`f948368bf3f9a49d...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-arm64-apple-darwin.tar.gz) | [`7af293a446285c41...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-arm64-apple-darwin.tar.gz) |\n| *-powerpc64-linux-gnu-debug.tar.gz | [`fbc766009041f2c6...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-powerpc64-linux-gnu-debug.tar.gz) | [`b905fef776ccb0f8...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-powerpc64-linux-gnu-debug.tar.gz) |\n| *-powerpc64-linux-gnu.tar.gz | [`1d2b389ecae24861...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-powerpc64-linux-gnu.tar.gz) | [`a6a4ca404a3001fc...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-powerpc64-linux-gnu.tar.gz) |\n| *-powerpc64le-linux-gnu-debug.tar.gz | [`e78a4d47f8dbffec...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-powerpc64le-linux-gnu-debug.tar.gz) | [`6b1eb2e875de34d5...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-powerpc64le-linux-gnu-debug.tar.gz) |\n| *-powerpc64le-linux-gnu.tar.gz | [`5ab6c4a6f99988e7...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-powerpc64le-linux-gnu.tar.gz) | [`0744d171fd5a6224...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-powerpc64le-linux-gnu.tar.gz) |\n| *-riscv64-linux-gnu-debug.tar.gz | [`68e49fd2dfdbe98b...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-riscv64-linux-gnu-debug.tar.gz) | [`9c19f76c2d7a3fb8...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-riscv64-linux-gnu-debug.tar.gz) |\n| *-riscv64-linux-gnu.tar.gz | [`173139662bd4331e...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-riscv64-linux-gnu.tar.gz) | [`0755081d8bb62909...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-riscv64-linux-gnu.tar.gz) |\n| *-win64-debug.zip | [`270501950de1c55e...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-win64-debug.zip) | [`9a1e6da8c0fb1623...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-win64-debug.zip) |\n| *-win64-setup-unsigned.exe | [`21839223fa33e86f...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-win64-setup-unsigned.exe) | [`32cda3faeaf4d2f6...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-win64-setup-unsigned.exe) |\n| *-win64-unsigned.tar.gz | [`aeeabbb72b47c843...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-win64-unsigned.tar.gz) | [`385f6009a3e3b35c...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-win64-unsigned.tar.gz) |\n| *-win64.zip | [`6c8ac0a41980c34a...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-win64.zip) | [`a1cbbefddabf8a84...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-win64.zip) |\n| *-x86_64-apple-darwin-unsigned.dmg | [`890caf48cb5f2710...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-x86_64-apple-darwin-unsigned.dmg) | [`78b52e782cf5d4cc...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-x86_64-apple-darwin-unsigned.dmg) |\n| *-x86_64-apple-darwin-unsigned.tar.gz | [`df51da5073165fb0...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-x86_64-apple-darwin-unsigned.tar.gz) | [`371a02ebc90425b2...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-x86_64-apple-darwin-unsigned.tar.gz) |\n| *-x86_64-apple-darwin.tar.gz | [`3c9b643d7f4a6ac5...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-x86_64-apple-darwin.tar.gz) | [`b843c49fffde7ed0...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-x86_64-apple-darwin.tar.gz) |\n| *-x86_64-linux-gnu-debug.tar.gz | [`e9f5d54fa3f1941b...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-x86_64-linux-gnu-debug.tar.gz) | [`3b50b3fdf46dcf19...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-x86_64-linux-gnu-debug.tar.gz) |\n| *-x86_64-linux-gnu.tar.gz | [`543dce95f9a0b243...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c-x86_64-linux-gnu.tar.gz) | [`91e165b95a998da2...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c-x86_64-linux-gnu.tar.gz) |\n| *.tar.gz | [`a2f9f253d3373fda...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/bitcoin-5f65afff9c4c.tar.gz) | [`0bea692881f30f14...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/bitcoin-f37b9af9646c.tar.gz) |\n| guix_build.log | [`b2bbb782674ee4ee...`](https://drahtbot.space/guix/bitcoin/bitcoin/5f65afff9c4c735d607a69fc3d18b4ecadbf3ba9/guix_build.log) | [`563fb647a42c0175...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/guix_build.log) |\n| guix_build.log.diff |  | [`08ef072b38bb0ad3...`](https://drahtbot.space/guix/bitcoin/bitcoin/f37b9af9646c15277257c5ac089bf648661f8bb6/guix_build.log.diff) |\n\n"
        }
      ]
    },
    {
      "title": "refactor: Add LIFETIMEBOUND / -Wdangling-gsl to Assert()",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25248",
      "state": "open",
      "created_at": "2022-05-30T14:29:20Z",
      "closed_at": null,
      "comments": [
        {
          "user": "jonatack",
          "created_at": "2022-05-30T14:33:01Z",
          "author_association": "MEMBER",
          "body": "Concept ACK"
        },
        {
          "user": "DrahtBot",
          "created_at": "2022-05-31T04:29:11Z",
          "author_association": "CONTRIBUTOR",
          "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25112](https://github.com/bitcoin/bitcoin/pull/25112) (util: Move error message formatting of NonFatalCheckError to cpp by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first."
        }
      ]
    },
    {
      "title": "refactor: Remove no-op TIME_INIT on deser",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25245",
      "state": "open",
      "created_at": "2022-05-30T10:37:38Z",
      "closed_at": null,
      "comments": []
    },
    {
      "title": "test: autogenerate bash completion",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25243",
      "state": "open",
      "created_at": "2022-05-30T09:33:05Z",
      "closed_at": null,
      "comments": [
        {
          "user": "fanquake",
          "created_at": "2022-05-30T09:47:27Z",
          "author_association": "MEMBER",
          "body": "Thanks for picking this up. Did you re-use any code from #18606? A lot of the changes are very similar to the changes there, except for different whitespace, class names, copyright dates etc. If so, cherry-picking so that the original author is preserved is appropriate. "
        },
        {
          "user": "laanwj",
          "created_at": "2022-05-30T12:59:08Z",
          "author_association": "MEMBER",
          "body": "Concept ACK on auto-generating what can be auto-generated. \r\n\r\nI'm not entirely sure about the approach of making this a functional test. It's clever, but also different from how other auto-generated files (the manual pages, the example bitcoin.conf introduced in #22235) are handled in the release process.\r\n\r\nOn the other hand by adding the check this forces the file on the branch to always be up-to-date so it doesn't need to be in the release process. That's also something."
        },
        {
          "user": "suhailsaqan",
          "created_at": "2022-05-30T13:48:36Z",
          "author_association": "CONTRIBUTOR",
          "body": "> Concept ACK on auto-generating what can be auto-generated.\r\n> \r\n> I'm not entirely sure about the approach of making this a functional test. It's clever, but also different from how other auto-generated files (the manual pages, the example bitcoin.conf introduced in #22235) are handled in the release process.\r\n> \r\n> On the other hand by adding the check this forces the file on the branch to always be up-to-date so it doesn't need to be in the release process. That's also something.\r\n\r\nLook at https://github.com/bitcoin/bitcoin/issues/17289#issue-513520983"
        },
        {
          "user": "MarcoFalke",
          "created_at": "2022-05-30T14:01:37Z",
          "author_association": "MEMBER",
          "body": "Yeah, I wrote that comment before bitcoin.conf moved over to auto-generation. A functional test is one way to achieve this, but this can also be achieved by an auto-generation script at release time."
        },
        {
          "user": "laanwj",
          "created_at": "2022-05-30T15:59:54Z",
          "author_association": "MEMBER",
          "body": "I mean you can argue this is a better solution, and that we should move to this for all three.\r\n(but for the manual pages it's difficult as they contain a version number as well as the current month)"
        },
        {
          "user": "brunoerg",
          "created_at": "2022-05-30T17:40:09Z",
          "author_association": "CONTRIBUTOR",
          "body": "From linter:\r\n```\r\nFile \"test/functional/tool_cli_completion.py\" contains a shebang line, but has the file permission 644 instead of the expected executable permission 755. Do \"chmod 755 test/functional/tool_cli_completion.py\"\r\n```"
        },
        {
          "user": "suhailsaqan",
          "created_at": "2022-05-31T00:25:08Z",
          "author_association": "CONTRIBUTOR",
          "body": "> I mean you can argue this is a better solution, and that we should move to this for all three. (but for the manual pages it's difficult as they contain a version number as well as the current month)\r\n\r\nThanks for the review @laanwj! Just wondering, do the three of them have to be done the same way? I don't know how I would do it the same way it was done in https://github.com/bitcoin/bitcoin/pull/22235."
        },
        {
          "user": "suhailsaqan",
          "created_at": "2022-06-03T05:03:19Z",
          "author_association": "CONTRIBUTOR",
          "body": "Squashed commits."
        }
      ]
    },
    {
      "title": "wallet: 'CommitTransaction', remove extra wtx lookup and add exception for db write error",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25239",
      "state": "open",
      "created_at": "2022-05-29T18:03:29Z",
      "closed_at": null,
      "comments": [
        {
          "user": "achow101",
          "created_at": "2022-06-02T15:30:54Z",
          "author_association": "MEMBER",
          "body": "ACK 57fb37c27599fc865f20b42a27bb9c227f384de3"
        }
      ]
    },
    {
      "title": "GetExternalSigner(): fail if multiple signers are found",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25235",
      "state": "open",
      "created_at": "2022-05-28T19:00:52Z",
      "closed_at": null,
      "comments": [
        {
          "user": "amadeuszpawlik",
          "created_at": "2022-05-28T19:21:38Z",
          "author_association": "CONTRIBUTOR",
          "body": "Resolves #22636"
        },
        {
          "user": "amadeuszpawlik",
          "created_at": "2022-05-31T16:17:53Z",
          "author_association": "CONTRIBUTOR",
          "body": "@Sjors thanks for the input, test added!"
        },
        {
          "user": "Sjors",
          "created_at": "2022-06-02T16:24:10Z",
          "author_association": "MEMBER",
          "body": "Looks good at first glance, will review and test in more detail."
        },
        {
          "user": "achow101",
          "created_at": "2022-06-02T17:02:07Z",
          "author_association": "MEMBER",
          "body": "ACK 8e121cb43cd34239567c148e167c48d93097d1dc\r\n\r\nIt would really be preferable to allow the user to choose which signer rather than forcing one at a time, but this is fine for now."
        },
        {
          "user": "Rspigler",
          "created_at": "2022-06-03T01:30:09Z",
          "author_association": "NONE",
          "body": "Concept ACK.\r\n\r\nAgree with @Sjors about the multisig additions we would have to make"
        }
      ]
    },
    {
      "title": "bench: add benchmark for wallet 'AvailableCoins' function.",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25234",
      "state": "open",
      "created_at": "2022-05-28T14:19:40Z",
      "closed_at": null,
      "comments": [
        {
          "user": "DrahtBot",
          "created_at": "2022-05-28T15:08:24Z",
          "author_association": "CONTRIBUTOR",
          "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25218](https://github.com/bitcoin/bitcoin/pull/25218) (refactor: introduce generic 'Result' classes and connect them to CreateTransaction and GetNewDestination by furszy)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first."
        },
        {
          "user": "laanwj",
          "created_at": "2022-06-01T20:59:02Z",
          "author_association": "MEMBER",
          "body": "Concept ACK on benchmarking these, however there have been recent complaints that the benchmarks are slow, and  I've noticed these add more fairly slow to run benchmarks:\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|      359,740,298.60 |                2.78 |    0.0% |     19.79 | `WalletAvailableCoinsMulti`\r\n|      289,759,212.20 |                3.45 |    0.0% |     15.93 | `WalletAvailableCoinsOnlyBech32`\r\n|      559,973,432.00 |                1.79 |    0.0% |     30.80 | `WalletAvailableCoinsOnlyBech32M`\r\n|      196,348,457.20 |                5.09 |    0.0% |     10.80 | `WalletAvailableCoinsOnlyLegacy`\r\n|      304,247,935.40 |                3.29 |    0.0% |     16.73 | `WalletAvailableCoinsOnlyP2SH_SEGWIT`\r\n```\r\nE.g. a total of 94 seconds to the runtime of `bench_bitcoin` with default settings.\r\n"
        },
        {
          "user": "furszy",
          "created_at": "2022-06-02T12:13:43Z",
          "author_association": "CONTRIBUTOR",
          "body": "Thanks laanwj for the review!\r\n\r\nIt's interesting to see other results, locally this are my results:\r\n\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|      132,289,908.40 |                7.56 |    0.3% |      7.27 | `WalletAvailableCoinsMulti`\r\n|      104,691,758.40 |                9.55 |    0.1% |      5.77 | `WalletAvailableCoinsOnlyBech32`\r\n|      196,688,875.00 |                5.08 |    0.2% |     10.82 | `WalletAvailableCoinsOnlyBech32M`\r\n|       70,386,791.80 |               14.21 |    0.2% |      3.88 | `WalletAvailableCoinsOnlyLegacy`\r\n|      111,477,558.20 |                8.97 |    0.1% |      6.14 | `WalletAvailableCoinsOnlyP2SH_SEGWIT`\r\n```\r\n\r\nBut let me do something, going to decrease the bench number of iterations from 5 to 2. It should decrease the total time by half."
        },
        {
          "user": "furszy",
          "created_at": "2022-06-02T12:24:22Z",
          "author_association": "CONTRIBUTOR",
          "body": "Done, decreased the number of iterations to 2. And this are the results:\r\n\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|      129,406,083.50 |                7.73 |    0.0% |      2.85 | `WalletAvailableCoinsMulti`\r\n|      105,704,646.00 |                9.46 |    0.2% |      2.33 | `WalletAvailableCoinsOnlyBech32`\r\n|      206,642,667.00 |                4.84 |    0.6% |      4.55 | `WalletAvailableCoinsOnlyBech32M`\r\n|       69,838,895.50 |               14.32 |    0.0% |      1.54 | `WalletAvailableCoinsOnlyLegacy`\r\n|      112,263,500.00 |                8.91 |    0.0% |      2.47 | `WalletAvailableCoinsOnlyP2SH_SEGWIT`\r\n```\r\n\r\nTotal time: ~15 seconds to run the 5 new benchmarks at most here now.\r\nPreviously, with 5 iterations, total time was ~40 seconds. So, you should see more or less a 40% total time decrease there as well."
        },
        {
          "user": "furszy",
          "created_at": "2022-06-02T12:44:39Z",
          "author_association": "CONTRIBUTOR",
          "body": "Aside from that, I think that a good future question to ask ourselves would be whether we want to always run all the benchmarks all the time or not. Because, sooner or later, as the project isn't going to stop growing, we could end up sacrificing accuracy, implementing not entirely real scenarios (skipping parts of the flow that is being benchmarked) in favor of decreasing the total bench time (there is where my comment in https://github.com/bitcoin/bitcoin/pull/24924#pullrequestreview-985000006 heads to for example).\r\n\r\nBut well, this is just me thinking out loud.. after #24924, the total bench time will be pretty decent to not have to worry about this for a while."
        }
      ]
    },
    {
      "title": "rpc: Faster getblock API",
      "pull_request": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25232",
      "state": "open",
      "created_at": "2022-05-28T10:30:44Z",
      "closed_at": null,
      "comments": [
        {
          "user": "AaronDewes",
          "created_at": "2022-05-28T18:41:01Z",
          "author_association": "NONE",
          "body": "> There is some way to ensure that this is a speed improvement that justify this refactoring?\r\n\r\nYes, I'm running a benchmark right now and will share the results. A good way to test is also trying to sync [Fulcrum](https://github.com/cculianu/Fulcrum), an Electrum server for a more real-world scenario where getblock is used a lot."
        },
        {
          "user": "AaronDewes",
          "created_at": "2022-05-29T08:33:29Z",
          "author_association": "NONE",
          "body": "I haven't found a good way to benchmark it except trying to sync Fulcrum and viewing the logs. Without this patch, it often exceeded the RPC work queue depth and was very slow. With this patch, it was much faster and didn't do that."
        },
        {
          "user": "laanwj",
          "created_at": "2022-05-30T09:20:19Z",
          "author_association": "MEMBER",
          "body": "Concept ACK on doing the block read from disk without locking, when pruning is not enabled. This seems quite low-hanging fruit for optimization. Assuming, there can't be a race condition between the block being *written* to disk and reading it?"
        },
        {
          "user": "AaronDewes",
          "created_at": "2022-05-31T05:44:29Z",
          "author_association": "NONE",
          "body": "I don't think there is, because the check if the block exists (`LookupBlockIndex`) happens with `cs_main` locked. So if it's not written before the lock is released, the reading won't happen."
        }
      ]
    },
    {
      "title": "Memory leak via API listtransactions",
      "pull_request": null,
      "state": "open",
      "created_at": "2022-05-27T18:25:54Z",
      "closed_at": null,
      "comments": [
        {
          "user": "mzumsande",
          "created_at": "2022-05-29T18:35:39Z",
          "author_association": "CONTRIBUTOR",
          "body": "I tried to reproduce this (Ubuntu 20.04.4 LTS) with a large wallet but could not see a memory leak (also not with valgrind).\r\nWhat I did see is that repeated calls to `listtransactions` would lead to a step up in the memory claimed by bitcoind (as seen by top or pmap) that would not be released by the OS (enhanced by the fact that the memory for the large RPC response was reserved twice, fixed in #25237)\r\nBut after ~5 calls to `listtransactions` the memory of bitcoind would not increase any further for me with more listtransactions calls.\r\n"
        },
        {
          "user": "CWDT250",
          "created_at": "2022-05-29T21:28:26Z",
          "author_association": "NONE",
          "body": "My application is querying `listtransactions \"*\" 100000000` about once every 1 minute to retrieve a list of all transactions. The request takes about 10 seconds. After each call there is an increase in the consumed memory. Sometimes memory clearing is observed but this is useless and after 2-3 hours `bitcoind` dies with a kill signal from the OS.\r\n\r\nI also additionally checked after 5 or more calls the memory also grows by 100+ MB."
        }
      ]
    }
  ]
}